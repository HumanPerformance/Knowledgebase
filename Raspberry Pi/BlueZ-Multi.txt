// Pairing and implementation of multiple bluetooth modules
// HPH Knowledgebase
// Fluvio L Lobo Fenoglietto 02/05/2016

// Background ::

> Bluetooth is a wireless technology standard for exchanging data over short distances (using short-wavelength UHF radio waves in the ISM band from 2.4 to 2.485 GHz[4]) from fixed and mobile devices, and building personal area networks (PANs).
> Bluetooth modules and/or antennas can be adapted to micro-controllers in order to communicate sensor data to a control system like the Raspberry Pi.
> BlueZ is the original and official bluetooth protocol stack for Linux

// Description ::

> This guide was meant for the communication of our prototypes with our control system, which is a Rapsberry Pi - Raspbian, its OS, is Linux distribution. 
> This guide has been built to demonstrate the capabilities for accessing multiple bluetooh-serial ports from your Raspberry Pi
> Given the specificity of the demo, some of the instructions may require referencing additional guides and tutorials from the HPH Knowledgebase

// Requirements ::

> Follow and complete the original BlueZ guide

// Equipment ::

> This demo was completed with the following tools/instruments/devices:
> Hardware:
>> 1.0 - Arduino Redboards (x2) - Arduino Uno shoudl work also
>> 2.0 - RN42 Bluetooth modules (x2)
>> 3.0 - Breadboard (x1)
>> 4.0 - Jumper wires
>> 5.0 - USB cable to connect Ardunions to computer
>> 6.0 - Barrel jack connectors to power Arduinos without PC
>> 7.0 - Bluetooth donggle for your Raspberry Pi or Linux system
> Software:
>> 1.0 - Arduino IDE
>> 2.0 - Copy of StandardFirmata.ino
>> 2.0 - BlueZ

// Guide ::

1.0 - Always update and upgrade raspbian!

> sudo apt-get update
> sudo apt-get upgrade

2.0 - Install StandardFirmata.ino

> Prior to make any connection, upload the StandardFirmata.ino program to the Arduino boards using the Arduino IDE

> NOTE: A fresh copy of StandardFirmata can be obtained from the examples within the Arduino IDE (File>Examples>Firmata>StandardFirmata)

3.0 - Connect both bluetooth modules to their respective Arduino boards

NOTE: Use wiring diagrams for details. Here are some basics.

Bluetooth module pin / Arduino Pin
> TX / RX (Digital Pin 0)
> RX / TX (Digital Pin 1)
> GND / GND
> VCC / 5V or 3.3V --Depending on the module

4.0 - Power the two arduino boards with the barrel jack connectors

> If connected correctly, a flasing red light will be observed on the bluetooth modules.
> If you are using the same modules (RN42 - BlueSMiRF), the light will be flashing at about 1Hz (1 flash per second).

5.0 - On the Linux system (hopefully a Raspberry Pi! Hooray!), open the terminal.

6.0 - First, check the status of your bluetooth donggle

> sudo hciconfig -a

> The terminal should print out information about your bluetooth donggle under hci0 (or another number if many --but I doubt it)
> Keep an eye for the second line, you want the output to be "UP RUNNING", which signals that the module is "ON"

7.0 - Perform a scan in order to look for devices

> sudo hcitool scan

> The terminal will print the devices and their address (XX:XX:XX:XX:XX:XX)
> The address will be used to establish and stop communication with the modules
> I recommend that you write down the address of the devices of interest...

8.0 - Create a bluetooth object for each device. This is equivalent to pairing the device.

> sudo bluez-simple-agent hci0 00:06:66:7D:97:2E
> sudo bluez-simple-agent hci0 00:06:66:7C:8A:0B  

> Once you hit enter, a message on the terminal will request the pin code of the device.
> "Enter PIN Code:" is the message.
> Look for your modules PIN code within the user manual. Most modules come with defualt PIN codes such as 0000 or 1234.
> Once entered, the terminal will throw a message starting with "New device...", which is basically the confirmation.

9.0 - There are several ways of verifying the connection

> Open the bluetooth mnanager UI - You will see the two deivces listed and with a "key" on top of their icon (this translated to "paired")

10.0 - Set-up the serial communication with bluetooth devices

> Recall that we are transmitting serial data through these bluetooth modules.
> Hence, we must define and save their information for suture reference.

> 10.1 - Edit the rfcomm file

>> sudo nano /etc/bluetooth/rfcomm.conf

>> This will open the terminal-based line editor.
>> For each module, where X must be replaced with a number in a series starting from "0", type the following...
>> In some instances, like the "channel" number and the "name", just ensure they dont match between modules.
>> Note that comments are preceeded by the "#" key.

>> rfcommX {
>>
>>	# Automatically bind the device at startup
>>      bind no;
>>
>>      # Bluetooth address of the device
>>      device 00:06:66:7D:97:2E;
>>
>>      # RFCOMM channel for the connection
>>      channel 1; --As of 
>>
>>      # Description of the connection
>>      comment "rn42moduleX";
>> } 

> 10.2 Connect from the bluetooth terminal

>> sudo rfcomm connect rfcommX

>> Note that for multiple devices, you will need to open multiple command windows/terminals

### Here I need to confirm that using the same channel wont affect the connections.



// References ::

> Fluvios BRAIN!!
